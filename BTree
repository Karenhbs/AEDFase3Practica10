package btree;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import Exceptions.ItemNoFound;

public class BTree<E extends Comparable<E>> {
    private BNode<E> root;
    private int orden;
    private boolean up;
    private BNode<E> nDes;

    public BTree(int orden) {
        this.orden = orden;
        this.root = null;
    }

    public boolean isEmpty() {
        return this.root == null;
    }

    public void insert(E cl) {
        up = false;
        E mediana;
        BNode<E> pnew;
        mediana = push(this.root, cl);
        if (up) {
            pnew = new BNode<>(this.orden);
            pnew.count = 1;
            pnew.keys.set(0, mediana);
            pnew.childs.set(0, this.root);
            pnew.childs.set(1, nDes);
            this.root = pnew;
        }
    }

    public void remove(E cl) {
        if (root != null) {
            removeRecursive(root, cl);
            if (root.count == 0 && root.childs.get(0) != null) {
                root = root.childs.get(0); // reducir altura si quedó vacío
            } else if (root.count == 0) {
                root = null;
            }
        }
    }

    private void removeRecursive(BNode<E> node, E cl) {
        int[] pos = new int[1];
        boolean found = node.searchNode(cl, pos);

        if (found) {
            if (node.childs.get(0) == null) {
                // caso hoja
                for (int i = pos[0]; i < node.count - 1; i++)
                    node.keys.set(i, node.keys.get(i + 1));
                node.count--;
            } else {
                // caso interno
                BNode<E> predNode = node.childs.get(pos[0]);
                while (predNode.childs.get(predNode.count) != null)
                    predNode = predNode.childs.get(predNode.count);
                E pred = predNode.keys.get(predNode.count - 1);
                node.keys.set(pos[0], pred);
                removeRecursive(node.childs.get(pos[0]), pred);
            }
        } else {
            if (node.childs.get(0) == null) return;
            BNode<E> child = node.childs.get(pos[0]);
            if (child.count == (orden - 1) / 2) {
                fixChild(node, pos[0]);
            }
            removeRecursive(node.childs.get(pos[0]), cl);
        }
    }

    private void fixChild(BNode<E> parent, int idx) {
        BNode<E> child = parent.childs.get(idx);
        BNode<E> leftSibling = (idx > 0) ? parent.childs.get(idx - 1) : null;
        BNode<E> rightSibling = (idx < parent.count) ? parent.childs.get(idx + 1) : null;

        if (leftSibling != null && leftSibling.count > (orden - 1) / 2) {
            for (int i = child.count; i > 0; i--) {
                child.keys.set(i, child.keys.get(i - 1));
                child.childs.set(i + 1, child.childs.get(i));
            }
            child.childs.set(1, child.childs.get(0));
            child.keys.set(0, parent.keys.get(idx - 1));
            child.childs.set(0, leftSibling.childs.get(leftSibling.count));
            child.count++;

            parent.keys.set(idx - 1, leftSibling.keys.get(leftSibling.count - 1));
            leftSibling.count--;
        } else if (rightSibling != null && rightSibling.count > (orden - 1) / 2) {
            child.keys.set(child.count, parent.keys.get(idx));
            child.childs.set(child.count + 1, rightSibling.childs.get(0));
            child.count++;

            parent.keys.set(idx, rightSibling.keys.get(0));
            for (int i = 0; i < rightSibling.count - 1; i++) {
                rightSibling.keys.set(i, rightSibling.keys.get(i + 1));
                rightSibling.childs.set(i, rightSibling.childs.get(i + 1));
            }
            rightSibling.childs.set(rightSibling.count - 1, rightSibling.childs.get(rightSibling.count));
            rightSibling.count--;
        } else {
            if (leftSibling != null) {
                merge(parent, idx - 1);
            } else if (rightSibling != null) {
                merge(parent, idx);
            }
        }
    }

    private void merge(BNode<E> parent, int idx) {
        BNode<E> child = parent.childs.get(idx);
        BNode<E> sibling = parent.childs.get(idx + 1);

        child.keys.set(child.count, parent.keys.get(idx));
        for (int i = 0; i < sibling.count; i++) {
            child.keys.set(child.count + 1 + i, sibling.keys.get(i));
            child.childs.set(child.count + 1 + i, sibling.childs.get(i));
        }
        child.childs.set(child.count + 1 + sibling.count, sibling.childs.get(sibling.count));
        child.count += sibling.count + 1;

        for (int i = idx; i < parent.count - 1; i++) {
            parent.keys.set(i, parent.keys.get(i + 1));
            parent.childs.set(i + 1, parent.childs.get(i + 2));
        }
        parent.count--;
    }

    public boolean search(E cl) {
        if (isEmpty()) {
            System.out.println("El árbol está vacío");
            return false;
        }
        return searchRecursive(root, cl);
    }

    private boolean searchRecursive(BNode<E> current, E cl) {
        int[] pos = new int[1];
        boolean found = current.searchNode(cl, pos);

        if (found) {
            System.out.println(cl + " se encuentra en el nodo " + current.getId() + " en la posición " + pos[0]);
            return true;
        }

        if (current.childs.get(0) == null) {
            return false;
        }

        return searchRecursive(current.childs.get(pos[0]), cl);
    }

    private E push(BNode<E> current, E cl) {
        int[] pos = new int[1];
        E mediana;

        if (current == null) {
            up = true;
            nDes = null;
            return cl;
        } else {
            boolean exists = current.searchNode(cl, pos);
            if (exists) {
                System.out.println("Item duplicado\n");
                up = false;
                return null;
            }
            mediana = push(current.childs.get(pos[0]), cl);
            if (up) {
                if (current.nodeFull(this.orden - 1)) {
                    mediana = dividedNode(current, mediana, pos[0]);
                } else {
                    up = false;
                    putNode(current, mediana, nDes, pos[0]);
                }
            }
            return mediana;
        }
    }

    private void putNode(BNode<E> current, E cl, BNode<E> rd, int k) {
        int i;
        for (i = current.count - 1; i >= k; i--) {
            current.keys.set(i + 1, current.keys.get(i));
            current.childs.set(i + 2, current.childs.get(i + 1));
        }
        current.keys.set(k, cl);
        current.childs.set(k + 1, rd);
        current.count++;
    }

    private E dividedNode(BNode<E> current, E cl, int k) {
        BNode<E> rd = nDes;
        int i, posMdna;

        posMdna = (k <= this.orden / 2) ? this.orden / 2 : this.orden / 2 + 1;

        nDes = new BNode<>(this.orden);

        for (i = posMdna; i < this.orden - 1; i++) {
            nDes.keys.set(i - posMdna, current.keys.get(i));
            nDes.childs.set(i - posMdna + 1, current.childs.get(i + 1));
        }

        nDes.count = (this.orden - 1) - posMdna;
        current.count = posMdna;

        if (k <= this.orden / 2)
            putNode(current, cl, rd, k);
        else
            putNode(nDes, cl, rd, k - posMdna);

        E median = current.keys.get(current.count - 1);
        nDes.childs.set(0, current.childs.get(current.count));
        current.count--;
        return median;
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        if (isEmpty()) {
            sb.append("BTree is empty...");
        } else {
            sb.append("Id.Nodo\tClaves Nodo\tId.Padre\tId.Hijos\n");
            writeTree(this.root, -1, sb, new int[] { 1 });
        }
        return sb.toString();
    }

    private void writeTree(BNode<E> node, int parentId, StringBuilder sb, int[] idCounter) {
        int currentId = idCounter[0]++;
        node.setId(currentId);
        node.setParentId(parentId);

        StringBuilder claves = new StringBuilder("(");
        for (int i = 0; i < node.count; i++) {
            claves.append(node.keys.get(i));
            if (i < node.count - 1) {
                claves.append(", ");
            }
        }
        claves.append(")");

        ArrayList<BNode<E>> hijos = new ArrayList<>();
        for (int i = 0; i <= node.count; i++) {
            BNode<E> child = node.childs.get(i);
            if (child != null) {
                hijos.add(child);
            }
        }

        sb.append(currentId).append("\t").append(claves).append("\t");
        sb.append(parentId == -1 ? "--" : "[" + parentId + "]").append("\t");

        if (hijos.isEmpty()) {
            sb.append("--\n");
        } else {
            sb.append("[");
            for (int i = 0; i < hijos.size(); i++) {
                if (i > 0) sb.append(", ");
                sb.append("##");
            }
            sb.append("]\n");

            int pos = sb.lastIndexOf("[");
            for (int i = 0; i < hijos.size(); i++) {
                BNode<E> child = hijos.get(i);
                int idx = sb.indexOf("##", pos);
                writeTree(child, currentId, sb, idCounter);
                sb.replace(idx, idx + 2, String.valueOf(child.getId()));
                pos = idx + 1;
            }
        }
    }
    
    
    public static BTree<RegistroEstudiante> building_Btree(String filePath) throws ItemNoFound, FileNotFoundException, IOException {
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            int orden = Integer.parseInt(br.readLine().trim());
            BTree<RegistroEstudiante> btree = new BTree<>(orden);
            Map<Integer, BNode<RegistroEstudiante>> nodos = new HashMap<>();
            Map<Integer, Integer> niveles = new HashMap<>();
            String line;

            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (line.isEmpty()) continue;

                String[] partes = line.split(",");
                if (partes.length < 3) throw new ItemNoFound("Línea inválida: " + line);

                int nivel = Integer.parseInt(partes[0]);
                int id = Integer.parseInt(partes[1]);

                BNode<RegistroEstudiante> nodo = new BNode<>(orden);
                nodo.setId(id);
                nodo.setParentId(-1);
                nodo.count = partes.length - 2;

                if (nodo.count < ((nivel == 0) ? 1 : (orden - 1) / 2) || nodo.count > orden - 1)
                    throw new ItemNoFound("Nodo con número inválido de claves: " + line);

                for (int i = 2; i < partes.length; i++) {
                    int codigo = Integer.parseInt(partes[i]);
                    RegistroEstudiante est = new RegistroEstudiante(codigo, "Nombre" + codigo);
                    nodo.keys.set(i - 2, est);
                }

                nodos.put(id, nodo);
                niveles.put(id, nivel);
            }

            // Reconstrucción jerárquica básica por niveles
            for (Map.Entry<Integer, BNode<RegistroEstudiante>> entry : nodos.entrySet()) {
                int id = entry.getKey();
                BNode<RegistroEstudiante> nodo = entry.getValue();
                int nivel = niveles.get(id);

                if (nivel == 0) {
                    btree.root = nodo;
                } else {
                    // Buscar el padre en niveles anteriores
                    for (Map.Entry<Integer, Integer> potentialParent : niveles.entrySet()) {
                        if (potentialParent.getValue() == nivel - 1) {
                            BNode<RegistroEstudiante> padre = nodos.get(potentialParent.getKey());
                            // Asignar hijo (si hay espacio)
                            for (int i = 0; i <= padre.count; i++) {
                                if (padre.childs.get(i) == null) {
                                    padre.childs.set(i, nodo);
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            return btree;
        }
    }
}

